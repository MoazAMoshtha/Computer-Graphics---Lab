#include<windows.h>
#include<GL/glut.h>
#include<GL/GL.h>
#include<math.h>
#include<stdio.h>
#include<iostream>
#include<list>

using namespace std;

void display(); 

static float R, G, B;

void init(void)
{
	glClearColor(0.16, 0.24, 0.15, 0.0);
	glLineWidth(10.0);
	glPointSize(6.0);
	glClear(GL_COLOR_BUFFER_BIT);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluOrtho2D(0.0, 600, 0.0, 300);

}

bool location(float x, float y, float x1, float y1, float x2, float y2) {
	if (x > x1 && x < x2 && y >y1&& y < y2) {
		return true;
	}
	else
	{
		return false;
	}
}

float Random() {
	return rand() % 100;
}


void DrawRecti(float x1, float y1, float x2, float y2, float R, float G, float B) {
	glColor3f(R, G, B);
	glRecti(x1, y1, x2, y2);
}



void myMouse(int button, int state, int x, int y) {
	y = 300 - y;

	// test for mouse button as well as for a full array 
	if (button == GLUT_LEFT_BUTTON && state == GLUT_DOWN && location(x,y,100, 100, 500, 200) ) {
		R = (Random()) / 100;
		G = (Random()) / 100;
		B = (Random()) / 100;
	}
	display();
}

void display()
{
	DrawRecti(0, 0, 600, 300,1- R,1- G,1- B);
	DrawRecti(100, 100, 500, 200, R, G, B);
	
	glFlush();
}

int main(int argc, char** argv) {
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
	glutInitWindowSize(600,300 );
	glutInitWindowPosition(250, 50);
	glutCreateWindow("color Change");
	glutMouseFunc(myMouse);
	glutDisplayFunc(display);
	init();
	glutMainLoop();
	return 0;

}