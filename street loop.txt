#include<Windows.h>
#include<gl/GL.h>
#include<gl/glut.h>
#include <iostream>
#include <GL/glut.h>
#include <math.h>
using namespace std;

void myInit(void)
{
	glClearColor(0.62, 0.86, 0.94, 0.0);
	glPointSize(4.0);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluOrtho2D(0.0, 620, 0.0, 540);
}

void DrawQuinary(int x1, int y1)
{
	glBegin(GL_POLYGON);
	glColor3f(0.09, 0.58, 0.27);
	glVertex2i(x1, y1);
	glVertex2i(x1 + 23, y1);
	glVertex2i(x1 + 30, y1 + 20);
	glVertex2i(x1 + 11, y1 + 35);
	glVertex2i(x1 - 7, y1 + 20);
	glEnd();
}

void DrawCircle(float cx, float cy, float r, int num_segments, float R, float G, float B)
{
	glBegin(GL_POLYGON);
	glColor3f(R, G, B);
	for (int ii = 0; ii < num_segments; ii++)
	{
		float theta = 2.0f * 3.1415926f * float(ii) / float(num_segments);//get the current angle
		float x = r * cosf(theta);//calculate the x component
		float y = r * sinf(theta);//calculate the y component
		glVertex2f(x + cx, y + cy);//output vertex
	}
	glEnd();
}

void DrawRecti(float x1, float y1, float x2, float y2, float R, float G, float B) {
	glColor3f(R, G, B);
	glRecti(x1, y1, x2, y2);
}

void Drawtang(float x1, float y1, float x2, float y2, float x3, float y3, float R, float G, float B) {
	glColor3f(R, G, B);
	glBegin(GL_POLYGON);
	glVertex2f(x1, y1);
	glVertex2f(x2, y2);
	glVertex2f(x3, y3);
	glEnd();
}

void DrawLine(float x1, float y1, float x2, float y2, float R, float G, float B) {
	glColor3f(R, G, B);
	glBegin(GL_LINES);
	glLineWidth(2);
	glVertex2f(x1, y1);
	glVertex2f(x2, y2);
	glEnd();
}

void DrawCloud(float x1, float y1)
{
	DrawCircle(x1, y1, 25, 50, 1, 1, 1);
	DrawCircle(x1 + 25, y1, 25, 50, 1, 1, 1);
	DrawCircle(x1 + 50, y1, 25, 50, 1, 1, 1);
}

void DrawTree(float x1, float y1) {
	DrawRecti(x1, y1, x1 + 16, y1 + 105, .55, .09, .11);
	Drawtang(x1 - 50, y1 + 100, x1 + 65, y1 + 100, x1 + 7, y1 + 155, 0.09, 0.58, 0.27);
	Drawtang(x1 - 50, y1 + 120, x1 + 65, y1 + 120, x1 + 7, y1 + 175, 0.09, 0.58, 0.27);
	Drawtang(x1 - 50, y1 + 140, x1 + 65, y1 + 140, x1 + 7, y1 + 195, 0.09, 0.58, 0.27);
}


void draw() {
	DrawRecti(0, 0, 620, 580, 0.62, 0.86, 0.94);
	int space = 0;

	// draw graound
	DrawRecti(0, 0, 620, 70, 0.72, 0.93, 0.20);
	space = 57;
	for (size_t i = 0; i < 7; i++)
	{
		DrawQuinary(125 + (space * i), 0);
	}

	//draw street 
	DrawRecti(0, 70, 620, 90, 1, 1, 1);
	DrawRecti(0, 90, 620, 210, .5, .5, .5);
	DrawRecti(0, 190, 620, 210, 1, 1, 1);
	space = 154;
	for (size_t i = 0; i < 4; i++)//red
	{
		DrawRecti(0 + (space * i), 70, 77 + (space * i), 90, 0.93, 0.13, 0.15);
	}
	for (size_t i = 0; i < 4; i++)// red 
	{
		DrawRecti(0 + (space * i), 190 , 77 + (space * i), 210, 0.93, 0.13, 0.15);
	}
	space = 210;
	for (size_t i = 0; i < 3; i++) // mid white
	{
		DrawRecti(105 + (space * i), 135, 195 + (space * i), 150,1,1,1 );

	}
	for (size_t i = 0; i < 3; i++)// mid yelow
	{
		DrawRecti(0 + (space * i), 135, 90 + (space * i), 150, 0.95, 0.93, 0.15);
	}
	
	//Draw tree
	space = 155;
	for (size_t i = 0; i < 4; i++)
	{
		DrawTree(60+(space * i),210);
	}
	
	// Draw cloud
	space = 210;
	for (size_t i = 0; i < 3; i++)// mid yelow
	{
		DrawCloud(75 + (space * i), 460);
	}

	//Draw sun
	DrawCircle(0, 540, 40, 50, .95, .93, .15);
	glFlush();
}

void main(int argc, char** argv)
{

	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
	glutInitWindowSize(620, 540);
	glutInitWindowPosition(50, 50);
	glutCreateWindow("Street");
	glutDisplayFunc(draw);
	myInit();
	glutMainLoop();

}
